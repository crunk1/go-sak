// Autogenerated by nilable_gen.py.
package nilable

import (
	"testing"
)

func TestBoolNil(t *testing.T) {
	var zero bool
	var b Bool
	if b != nil {
		t.Error("nil Bool not equal to nil")
	}
	if b.VOrZero() != zero {
		t.Error("nil Bool.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	b.V()
	t.Error("nil Bool.V did not panic")
}
func TestBoolNew(t *testing.T) {
	var v bool
	v = true
	b := NewBool(true)
	if b == nil {
		t.Fatal("NewBool should not return a nil")
	}
	if b.V() != v {
		t.Errorf("Bool.V did not return expected value: %v != %v", b.V(), v)
	}
	if b.VOrZero() != v {
		t.Errorf("Bool.VOrZero did not return expected value: %v != %v", b.VOrZero(), v)
	}
}

func TestByteNil(t *testing.T) {
	var zero byte
	var b Byte
	if b != nil {
		t.Error("nil Byte not equal to nil")
	}
	if b.VOrZero() != zero {
		t.Error("nil Byte.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	b.V()
	t.Error("nil Byte.V did not panic")
}
func TestByteNew(t *testing.T) {
	var v byte
	v = 1
	b := NewByte(1)
	if b == nil {
		t.Fatal("NewByte should not return a nil")
	}
	if b.V() != v {
		t.Errorf("Byte.V did not return expected value: %v != %v", b.V(), v)
	}
	if b.VOrZero() != v {
		t.Errorf("Byte.VOrZero did not return expected value: %v != %v", b.VOrZero(), v)
	}
}

func TestComplex64Nil(t *testing.T) {
	var zero complex64
	var c Complex64
	if c != nil {
		t.Error("nil Complex64 not equal to nil")
	}
	if c.VOrZero() != zero {
		t.Error("nil Complex64.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	c.V()
	t.Error("nil Complex64.V did not panic")
}
func TestComplex64New(t *testing.T) {
	var v complex64
	v = 1
	c := NewComplex64(1)
	if c == nil {
		t.Fatal("NewComplex64 should not return a nil")
	}
	if c.V() != v {
		t.Errorf("Complex64.V did not return expected value: %v != %v", c.V(), v)
	}
	if c.VOrZero() != v {
		t.Errorf("Complex64.VOrZero did not return expected value: %v != %v", c.VOrZero(), v)
	}
}

func TestComplex128Nil(t *testing.T) {
	var zero complex128
	var c Complex128
	if c != nil {
		t.Error("nil Complex128 not equal to nil")
	}
	if c.VOrZero() != zero {
		t.Error("nil Complex128.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	c.V()
	t.Error("nil Complex128.V did not panic")
}
func TestComplex128New(t *testing.T) {
	var v complex128
	v = 1
	c := NewComplex128(1)
	if c == nil {
		t.Fatal("NewComplex128 should not return a nil")
	}
	if c.V() != v {
		t.Errorf("Complex128.V did not return expected value: %v != %v", c.V(), v)
	}
	if c.VOrZero() != v {
		t.Errorf("Complex128.VOrZero did not return expected value: %v != %v", c.VOrZero(), v)
	}
}

func TestFloat32Nil(t *testing.T) {
	var zero float32
	var f Float32
	if f != nil {
		t.Error("nil Float32 not equal to nil")
	}
	if f.VOrZero() != zero {
		t.Error("nil Float32.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	f.V()
	t.Error("nil Float32.V did not panic")
}
func TestFloat32New(t *testing.T) {
	var v float32
	v = 1
	f := NewFloat32(1)
	if f == nil {
		t.Fatal("NewFloat32 should not return a nil")
	}
	if f.V() != v {
		t.Errorf("Float32.V did not return expected value: %v != %v", f.V(), v)
	}
	if f.VOrZero() != v {
		t.Errorf("Float32.VOrZero did not return expected value: %v != %v", f.VOrZero(), v)
	}
}

func TestFloat64Nil(t *testing.T) {
	var zero float64
	var f Float64
	if f != nil {
		t.Error("nil Float64 not equal to nil")
	}
	if f.VOrZero() != zero {
		t.Error("nil Float64.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	f.V()
	t.Error("nil Float64.V did not panic")
}
func TestFloat64New(t *testing.T) {
	var v float64
	v = 1
	f := NewFloat64(1)
	if f == nil {
		t.Fatal("NewFloat64 should not return a nil")
	}
	if f.V() != v {
		t.Errorf("Float64.V did not return expected value: %v != %v", f.V(), v)
	}
	if f.VOrZero() != v {
		t.Errorf("Float64.VOrZero did not return expected value: %v != %v", f.VOrZero(), v)
	}
}

func TestIntNil(t *testing.T) {
	var zero int
	var i Int
	if i != nil {
		t.Error("nil Int not equal to nil")
	}
	if i.VOrZero() != zero {
		t.Error("nil Int.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	i.V()
	t.Error("nil Int.V did not panic")
}
func TestIntNew(t *testing.T) {
	var v int
	v = 1
	i := NewInt(1)
	if i == nil {
		t.Fatal("NewInt should not return a nil")
	}
	if i.V() != v {
		t.Errorf("Int.V did not return expected value: %v != %v", i.V(), v)
	}
	if i.VOrZero() != v {
		t.Errorf("Int.VOrZero did not return expected value: %v != %v", i.VOrZero(), v)
	}
}

func TestInt8Nil(t *testing.T) {
	var zero int8
	var i Int8
	if i != nil {
		t.Error("nil Int8 not equal to nil")
	}
	if i.VOrZero() != zero {
		t.Error("nil Int8.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	i.V()
	t.Error("nil Int8.V did not panic")
}
func TestInt8New(t *testing.T) {
	var v int8
	v = 1
	i := NewInt8(1)
	if i == nil {
		t.Fatal("NewInt8 should not return a nil")
	}
	if i.V() != v {
		t.Errorf("Int8.V did not return expected value: %v != %v", i.V(), v)
	}
	if i.VOrZero() != v {
		t.Errorf("Int8.VOrZero did not return expected value: %v != %v", i.VOrZero(), v)
	}
}

func TestInt16Nil(t *testing.T) {
	var zero int16
	var i Int16
	if i != nil {
		t.Error("nil Int16 not equal to nil")
	}
	if i.VOrZero() != zero {
		t.Error("nil Int16.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	i.V()
	t.Error("nil Int16.V did not panic")
}
func TestInt16New(t *testing.T) {
	var v int16
	v = 1
	i := NewInt16(1)
	if i == nil {
		t.Fatal("NewInt16 should not return a nil")
	}
	if i.V() != v {
		t.Errorf("Int16.V did not return expected value: %v != %v", i.V(), v)
	}
	if i.VOrZero() != v {
		t.Errorf("Int16.VOrZero did not return expected value: %v != %v", i.VOrZero(), v)
	}
}

func TestInt32Nil(t *testing.T) {
	var zero int32
	var i Int32
	if i != nil {
		t.Error("nil Int32 not equal to nil")
	}
	if i.VOrZero() != zero {
		t.Error("nil Int32.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	i.V()
	t.Error("nil Int32.V did not panic")
}
func TestInt32New(t *testing.T) {
	var v int32
	v = 1
	i := NewInt32(1)
	if i == nil {
		t.Fatal("NewInt32 should not return a nil")
	}
	if i.V() != v {
		t.Errorf("Int32.V did not return expected value: %v != %v", i.V(), v)
	}
	if i.VOrZero() != v {
		t.Errorf("Int32.VOrZero did not return expected value: %v != %v", i.VOrZero(), v)
	}
}

func TestInt64Nil(t *testing.T) {
	var zero int64
	var i Int64
	if i != nil {
		t.Error("nil Int64 not equal to nil")
	}
	if i.VOrZero() != zero {
		t.Error("nil Int64.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	i.V()
	t.Error("nil Int64.V did not panic")
}
func TestInt64New(t *testing.T) {
	var v int64
	v = 1
	i := NewInt64(1)
	if i == nil {
		t.Fatal("NewInt64 should not return a nil")
	}
	if i.V() != v {
		t.Errorf("Int64.V did not return expected value: %v != %v", i.V(), v)
	}
	if i.VOrZero() != v {
		t.Errorf("Int64.VOrZero did not return expected value: %v != %v", i.VOrZero(), v)
	}
}

func TestRuneNil(t *testing.T) {
	var zero rune
	var r Rune
	if r != nil {
		t.Error("nil Rune not equal to nil")
	}
	if r.VOrZero() != zero {
		t.Error("nil Rune.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	r.V()
	t.Error("nil Rune.V did not panic")
}
func TestRuneNew(t *testing.T) {
	var v rune
	v = 1
	r := NewRune(1)
	if r == nil {
		t.Fatal("NewRune should not return a nil")
	}
	if r.V() != v {
		t.Errorf("Rune.V did not return expected value: %v != %v", r.V(), v)
	}
	if r.VOrZero() != v {
		t.Errorf("Rune.VOrZero did not return expected value: %v != %v", r.VOrZero(), v)
	}
}

func TestStringNil(t *testing.T) {
	var zero string
	var s String
	if s != nil {
		t.Error("nil String not equal to nil")
	}
	if s.VOrZero() != zero {
		t.Error("nil String.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	s.V()
	t.Error("nil String.V did not panic")
}
func TestStringNew(t *testing.T) {
	var v string
	v = "foo"
	s := NewString("foo")
	if s == nil {
		t.Fatal("NewString should not return a nil")
	}
	if s.V() != v {
		t.Errorf("String.V did not return expected value: %v != %v", s.V(), v)
	}
	if s.VOrZero() != v {
		t.Errorf("String.VOrZero did not return expected value: %v != %v", s.VOrZero(), v)
	}
}

func TestUintNil(t *testing.T) {
	var zero uint
	var u Uint
	if u != nil {
		t.Error("nil Uint not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uint.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uint.V did not panic")
}
func TestUintNew(t *testing.T) {
	var v uint
	v = 1
	u := NewUint(1)
	if u == nil {
		t.Fatal("NewUint should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uint.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uint.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}

func TestUint8Nil(t *testing.T) {
	var zero uint8
	var u Uint8
	if u != nil {
		t.Error("nil Uint8 not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uint8.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uint8.V did not panic")
}
func TestUint8New(t *testing.T) {
	var v uint8
	v = 1
	u := NewUint8(1)
	if u == nil {
		t.Fatal("NewUint8 should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uint8.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uint8.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}

func TestUint16Nil(t *testing.T) {
	var zero uint16
	var u Uint16
	if u != nil {
		t.Error("nil Uint16 not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uint16.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uint16.V did not panic")
}
func TestUint16New(t *testing.T) {
	var v uint16
	v = 1
	u := NewUint16(1)
	if u == nil {
		t.Fatal("NewUint16 should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uint16.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uint16.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}

func TestUint32Nil(t *testing.T) {
	var zero uint32
	var u Uint32
	if u != nil {
		t.Error("nil Uint32 not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uint32.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uint32.V did not panic")
}
func TestUint32New(t *testing.T) {
	var v uint32
	v = 1
	u := NewUint32(1)
	if u == nil {
		t.Fatal("NewUint32 should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uint32.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uint32.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}

func TestUint64Nil(t *testing.T) {
	var zero uint64
	var u Uint64
	if u != nil {
		t.Error("nil Uint64 not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uint64.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uint64.V did not panic")
}
func TestUint64New(t *testing.T) {
	var v uint64
	v = 1
	u := NewUint64(1)
	if u == nil {
		t.Fatal("NewUint64 should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uint64.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uint64.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}

func TestUintptrNil(t *testing.T) {
	var zero uintptr
	var u Uintptr
	if u != nil {
		t.Error("nil Uintptr not equal to nil")
	}
	if u.VOrZero() != zero {
		t.Error("nil Uintptr.VOrZero did not return zero value")
	}

	defer func() {
		recover()
	}()
	u.V()
	t.Error("nil Uintptr.V did not panic")
}
func TestUintptrNew(t *testing.T) {
	var v uintptr
	v = 1
	u := NewUintptr(1)
	if u == nil {
		t.Fatal("NewUintptr should not return a nil")
	}
	if u.V() != v {
		t.Errorf("Uintptr.V did not return expected value: %v != %v", u.V(), v)
	}
	if u.VOrZero() != v {
		t.Errorf("Uintptr.VOrZero did not return expected value: %v != %v", u.VOrZero(), v)
	}
}
