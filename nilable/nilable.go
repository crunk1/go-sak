// Autogenerated by nilable_gen.py.
package nilable

type Bool = *boolStruct
type boolStruct struct {
	v bool
}

func NewBool(b bool) Bool {
	return &boolStruct{v: b}
}

// V returns the underlying bool value. Panics if nil.
func (b *boolStruct) V() bool {
	return b.v
}

// VOrZero returns the underlying bool value or the zero bool value if nil.
func (b *boolStruct) VOrZero() bool {
	if b == nil {
		var result bool
		return result
	}
	return b.V()
}

type Byte = *byteStruct
type byteStruct struct {
	v byte
}

func NewByte(b byte) Byte {
	return &byteStruct{v: b}
}

// V returns the underlying byte value. Panics if nil.
func (b *byteStruct) V() byte {
	return b.v
}

// VOrZero returns the underlying byte value or the zero byte value if nil.
func (b *byteStruct) VOrZero() byte {
	if b == nil {
		var result byte
		return result
	}
	return b.V()
}

type Complex64 = *complex64Struct
type complex64Struct struct {
	v complex64
}

func NewComplex64(c complex64) Complex64 {
	return &complex64Struct{v: c}
}

// V returns the underlying complex64 value. Panics if nil.
func (c *complex64Struct) V() complex64 {
	return c.v
}

// VOrZero returns the underlying complex64 value or the zero complex64 value if nil.
func (c *complex64Struct) VOrZero() complex64 {
	if c == nil {
		var result complex64
		return result
	}
	return c.V()
}

type Complex128 = *complex128Struct
type complex128Struct struct {
	v complex128
}

func NewComplex128(c complex128) Complex128 {
	return &complex128Struct{v: c}
}

// V returns the underlying complex128 value. Panics if nil.
func (c *complex128Struct) V() complex128 {
	return c.v
}

// VOrZero returns the underlying complex128 value or the zero complex128 value if nil.
func (c *complex128Struct) VOrZero() complex128 {
	if c == nil {
		var result complex128
		return result
	}
	return c.V()
}

type Float32 = *float32Struct
type float32Struct struct {
	v float32
}

func NewFloat32(f float32) Float32 {
	return &float32Struct{v: f}
}

// V returns the underlying float32 value. Panics if nil.
func (f *float32Struct) V() float32 {
	return f.v
}

// VOrZero returns the underlying float32 value or the zero float32 value if nil.
func (f *float32Struct) VOrZero() float32 {
	if f == nil {
		var result float32
		return result
	}
	return f.V()
}

type Float64 = *float64Struct
type float64Struct struct {
	v float64
}

func NewFloat64(f float64) Float64 {
	return &float64Struct{v: f}
}

// V returns the underlying float64 value. Panics if nil.
func (f *float64Struct) V() float64 {
	return f.v
}

// VOrZero returns the underlying float64 value or the zero float64 value if nil.
func (f *float64Struct) VOrZero() float64 {
	if f == nil {
		var result float64
		return result
	}
	return f.V()
}

type Int = *intStruct
type intStruct struct {
	v int
}

func NewInt(i int) Int {
	return &intStruct{v: i}
}

// V returns the underlying int value. Panics if nil.
func (i *intStruct) V() int {
	return i.v
}

// VOrZero returns the underlying int value or the zero int value if nil.
func (i *intStruct) VOrZero() int {
	if i == nil {
		var result int
		return result
	}
	return i.V()
}

type Int8 = *int8Struct
type int8Struct struct {
	v int8
}

func NewInt8(i int8) Int8 {
	return &int8Struct{v: i}
}

// V returns the underlying int8 value. Panics if nil.
func (i *int8Struct) V() int8 {
	return i.v
}

// VOrZero returns the underlying int8 value or the zero int8 value if nil.
func (i *int8Struct) VOrZero() int8 {
	if i == nil {
		var result int8
		return result
	}
	return i.V()
}

type Int16 = *int16Struct
type int16Struct struct {
	v int16
}

func NewInt16(i int16) Int16 {
	return &int16Struct{v: i}
}

// V returns the underlying int16 value. Panics if nil.
func (i *int16Struct) V() int16 {
	return i.v
}

// VOrZero returns the underlying int16 value or the zero int16 value if nil.
func (i *int16Struct) VOrZero() int16 {
	if i == nil {
		var result int16
		return result
	}
	return i.V()
}

type Int32 = *int32Struct
type int32Struct struct {
	v int32
}

func NewInt32(i int32) Int32 {
	return &int32Struct{v: i}
}

// V returns the underlying int32 value. Panics if nil.
func (i *int32Struct) V() int32 {
	return i.v
}

// VOrZero returns the underlying int32 value or the zero int32 value if nil.
func (i *int32Struct) VOrZero() int32 {
	if i == nil {
		var result int32
		return result
	}
	return i.V()
}

type Int64 = *int64Struct
type int64Struct struct {
	v int64
}

func NewInt64(i int64) Int64 {
	return &int64Struct{v: i}
}

// V returns the underlying int64 value. Panics if nil.
func (i *int64Struct) V() int64 {
	return i.v
}

// VOrZero returns the underlying int64 value or the zero int64 value if nil.
func (i *int64Struct) VOrZero() int64 {
	if i == nil {
		var result int64
		return result
	}
	return i.V()
}

type Rune = *runeStruct
type runeStruct struct {
	v rune
}

func NewRune(r rune) Rune {
	return &runeStruct{v: r}
}

// V returns the underlying rune value. Panics if nil.
func (r *runeStruct) V() rune {
	return r.v
}

// VOrZero returns the underlying rune value or the zero rune value if nil.
func (r *runeStruct) VOrZero() rune {
	if r == nil {
		var result rune
		return result
	}
	return r.V()
}

type String = *stringStruct
type stringStruct struct {
	v string
}

func NewString(s string) String {
	return &stringStruct{v: s}
}

// V returns the underlying string value. Panics if nil.
func (s *stringStruct) V() string {
	return s.v
}

// VOrZero returns the underlying string value or the zero string value if nil.
func (s *stringStruct) VOrZero() string {
	if s == nil {
		var result string
		return result
	}
	return s.V()
}

type Uint = *uintStruct
type uintStruct struct {
	v uint
}

func NewUint(u uint) Uint {
	return &uintStruct{v: u}
}

// V returns the underlying uint value. Panics if nil.
func (u *uintStruct) V() uint {
	return u.v
}

// VOrZero returns the underlying uint value or the zero uint value if nil.
func (u *uintStruct) VOrZero() uint {
	if u == nil {
		var result uint
		return result
	}
	return u.V()
}

type Uint8 = *uint8Struct
type uint8Struct struct {
	v uint8
}

func NewUint8(u uint8) Uint8 {
	return &uint8Struct{v: u}
}

// V returns the underlying uint8 value. Panics if nil.
func (u *uint8Struct) V() uint8 {
	return u.v
}

// VOrZero returns the underlying uint8 value or the zero uint8 value if nil.
func (u *uint8Struct) VOrZero() uint8 {
	if u == nil {
		var result uint8
		return result
	}
	return u.V()
}

type Uint16 = *uint16Struct
type uint16Struct struct {
	v uint16
}

func NewUint16(u uint16) Uint16 {
	return &uint16Struct{v: u}
}

// V returns the underlying uint16 value. Panics if nil.
func (u *uint16Struct) V() uint16 {
	return u.v
}

// VOrZero returns the underlying uint16 value or the zero uint16 value if nil.
func (u *uint16Struct) VOrZero() uint16 {
	if u == nil {
		var result uint16
		return result
	}
	return u.V()
}

type Uint32 = *uint32Struct
type uint32Struct struct {
	v uint32
}

func NewUint32(u uint32) Uint32 {
	return &uint32Struct{v: u}
}

// V returns the underlying uint32 value. Panics if nil.
func (u *uint32Struct) V() uint32 {
	return u.v
}

// VOrZero returns the underlying uint32 value or the zero uint32 value if nil.
func (u *uint32Struct) VOrZero() uint32 {
	if u == nil {
		var result uint32
		return result
	}
	return u.V()
}

type Uint64 = *uint64Struct
type uint64Struct struct {
	v uint64
}

func NewUint64(u uint64) Uint64 {
	return &uint64Struct{v: u}
}

// V returns the underlying uint64 value. Panics if nil.
func (u *uint64Struct) V() uint64 {
	return u.v
}

// VOrZero returns the underlying uint64 value or the zero uint64 value if nil.
func (u *uint64Struct) VOrZero() uint64 {
	if u == nil {
		var result uint64
		return result
	}
	return u.V()
}

type Uintptr = *uintptrStruct
type uintptrStruct struct {
	v uintptr
}

func NewUintptr(u uintptr) Uintptr {
	return &uintptrStruct{v: u}
}

// V returns the underlying uintptr value. Panics if nil.
func (u *uintptrStruct) V() uintptr {
	return u.v
}

// VOrZero returns the underlying uintptr value or the zero uintptr value if nil.
func (u *uintptrStruct) VOrZero() uintptr {
	if u == nil {
		var result uintptr
		return result
	}
	return u.V()
}
