import io
import os

dir_path = os.path.dirname(os.path.realpath(__file__))

types = [
    'bool',
    'byte',
    'complex64', 'complex128',
    'float32', 'float64',
    'int', 'int8', 'int16', 'int32', 'int64',
    'rune',
    'string',
    'uint', 'uint8', 'uint16', 'uint32', 'uint64', 'uintptr',
]

test_values = {
    'bool': 'true',
    'byte': '1',
    'complex64': '1', 'complex128': '1',
    'float32': '1', 'float64': '1',
    'int': '1', 'int8': '1', 'int16': '1', 'int32': '1', 'int64': '1',
    'rune': '1',
    'string': '"foo"',
    'uint': '1', 'uint8': '1', 'uint16': '1', 'uint32': '1', 'uint64': '1', 'uintptr': '1',
}


#####################
# Source generation #
#####################
source_path = os.path.join(dir_path, 'nilable.go')
buf = io.StringIO()
buf.write('''// Autogenerated by nilable_gen.py.
package nilable''')
type_declaration_format = '''type {cap_t} = *{t}Struct
type {t}Struct struct {{
\tv {t}
}}

func New{cap_t}({t0} {t}) {cap_t} {{
\treturn &{t}Struct{{v: {t0}}}
}}

// V returns the underlying {t} value. Panics if nil.
func ({t0} *{t}Struct) V() {t} {{
\treturn {t0}.v
}}

// VOrZero returns the underlying {t} value or the zero {t} value if nil.
func ({t0} *{t}Struct) VOrZero() {t} {{
\tif {t0} == nil {{
\t\tvar result {t}
\t\treturn result
\t}}
\treturn {t0}.V()
}}'''

# Gen source for each type.
for t in types:
    buf.write('\n\n')
    buf.write(type_declaration_format.format(
        t=t, cap_t=t.capitalize(), t0=t[0]))

buf.write('\n')

with open(source_path, 'w') as f:
    f.write(buf.getvalue())


###################
# Test generation #
###################
test_path = os.path.join(dir_path, 'nilable_test.go')
buf = io.StringIO()
buf.write('''// Autogenerated by nilable_gen.py.
package nilable

import (
\t"testing"
)''')
tests_format = '''func Test{cap_t}Nil(t *testing.T) {{
\tvar zero {t}
\tvar {t0} {cap_t}
\tif {t0} != nil {{
\t\tt.Error("nil {cap_t} not equal to nil")
\t}}
\tif {t0}.VOrZero() != zero {{
\t\tt.Error("nil {cap_t}.VOrZero did not return zero value")
\t}}

\tdefer func() {{
\t\trecover()
\t}}()
\t{t0}.V()
\tt.Error("nil {cap_t}.V did not panic")
}}
func Test{cap_t}New(t *testing.T) {{
\tvar v {t}
\tv = {t_test_value}
\t{t0} := New{cap_t}({t_test_value})
\tif {t0} == nil {{
\t\tt.Fatal("New{cap_t} should not return a nil")
\t}}
\tif {t0}.V() != v {{
\t\tt.Errorf("{cap_t}.V did not return expected value: %v != %v", {t0}.V(), v)
\t}}
\tif {t0}.VOrZero() != v {{
\t\tt.Errorf("{cap_t}.VOrZero did not return expected value: %v != %v", {t0}.VOrZero(), v)
\t}}
}}'''

# Gen tests for each type.
for t in types:
    buf.write('\n\n')
    buf.write(tests_format.format(
        t=t, cap_t=t.capitalize(), t0=t[0], t_test_value=test_values[t]))

buf.write('\n')

with open(test_path, 'w') as f:
    f.write(buf.getvalue())
